--Assembly description for compiler (this is a sort of higher level kind of assembly that the compiler spits out and optimizes)


--All statements follow the following grammar:

[arg-prefix] <- %
[arg-prefix] <- $
[arg-prefix] <- #
[arg-prefix] <- !
[arg-prefix] <- @
[arg-prefix] <- :

[arg-list] <- [arg-list] [arg-prefix][arg]
[arg-list] <- 

[statement] <- [opt-code] [arg-list]




--The following are a description on what the [arg] is expected to be, which is a constant number of characters for each type of prefix, where 'H' is a hexadecimal character:

%H 
$HH
#HHHH
!HHHHHHHH
@HHHHHHHH
:HHHHHHHH


% is for register number
$ is for byte number
# is for word number
! is for double word number
@ is for refering to labels
: is for making labels


--the following are the letters used for prefixes inside the C code:

% - B
$ - B
# - W
! - D
@ - D
: - D

------ the registers %0 %1 %F , from the optimizer's perspective, are not available.
------ if the C code prefix would be composed only of multiple 'B' , then it is instead 'B#' where the '#' is the number of 'B'

--list of op-codes and their argument prefixes:


NOP_

PU1_ %
PU2_ % %
PUA1 %
PUA2 % %
POP1 %
POP2 % %

BL1_ % $
RL1_ % #
RL2_ % % !

CALL % %
RET_

STPA % #
STPS % #
STWN % $
STRN % $
STWV % $
STRV % $

ALOC
ALCR % #
STOF % #

AJMP % %
CJMP % % %

JJMP % % :
JTEN @
JEND

MOV_ % %

AND_ % % %
OR__ % % %
XOR_ % % %
SSUB % % %

ADDN % % %
SUBN % % %
SUBC % % %

MULS % %
MULL % %
DIVM % %

SHFT % %
BSWP % %

MWWN % % %
MRWN % % %
MWWV % % %
MRWV % % %
MWBN % %
MRBN % %
MWBV % %
MRBV % %

LABL :
PHIS %
PHIE %

FCST $ # :
FCEN

D32U
R32U
D32S
R32S

D64U
R64U
D64S
R64S

LAD0 % % % % % %
LAD1 % % % % %
LAD2 % % % %
LAD3 % % % % % % % %
LAD4
LAD5

LSU0 % % % %
LSU3 % % % % % % % %
LSU4
LSU5

LMU3 % % % % % % % %
LMU4
LMU5

LDI4
LDI5

LLS6
LLS7

LRS6
LRS7


SYRB %
SYRW %
SYRD % %
SYRQ % % % %
SYRE

NSNB !

ZNXB !

BYTE $
WORD #
DWRD !

SYDB
SYDW
SYDD
SYDQ
SYDE

SYCB $
SYCW #
SYCD !
SYCL @



SYW0
SYW1
SYW2
SYW3
SYW4
SYW5
SYW6
SYW7
SYW8
SYW9
SBLW
SBRW

SYD0
SYD1
SYD2
SYD3
SYD4
SYD5
SYD6
SYD7
SYD8
SYD9
SBLD
SBRD

SYQ0
SYQ1
SYQ2
SYQ3
SYQ4
SYQ5
SYQ6
SYQ7
SYQ8
SYQ9
SBLQ
SBRQ

SCBW
SCWD
SCDQ
SCQD
SCDW
SCWB
SCDB
SCQB



--list of op-codes by argument types


NOP_
FCEN
RET_
ALOC
D32U
R32U
D32S
R32S
D64U
R64U
D64S
R64S
LAD4
LAD5
LSU4
LSU5
LMU4
LMU5
LDI4
LDI5
LLS6
LLS7
LRS6
LRS7
JEND
SYRE
SYDB
SYDW
SYDD
SYDQ
SYDE
SYW0
SYW1
SYW2
SYW3
SYW4
SYW5
SYW6
SYW7
SYW8
SYW9
SBLW
SBRW
SYD0
SYD1
SYD2
SYD3
SYD4
SYD5
SYD6
SYD7
SYD8
SYD9
SBLD
SBRD
SYQ0
SYQ1
SYQ2
SYQ3
SYQ4
SYQ5
SYQ6
SYQ7
SYQ8
SYQ9
SBLQ
SBRQ
SCBW
SCWD
SCZD
SCDQ
SCZQ 
SCQD
SCDW
SCWB
SCDB
SCQB

PU1_ %
PUA1 %
POP1 %
SYRB %
SYRW %
PHIS %
PHIE %

BYTE $
SYCB $

PU2_ % %
PUA2 % %
POP2 % %
CALL % %
AJMP % %
MULS % %
MULL % %
DIVM % %
SHFT % %
BSWP % %
MWBN % %
MRBN % %
MWBV % %
MRBV % %
MOV_ % %
SYRD % %

AND_ % % %
OR__ % % %
XOR_ % % %
SSUB % % %
ADDN % % %
SUBN % % %
SUBC % % %
MWWN % % %
MRWN % % %
MWWV % % %
MRWV % % %
CJMP % % %

SYRQ % % % %
LSU0 % % % %
LAD2 % % % %

LAD1 % % % % %

LAD0 % % % % % %

LAD3 % % % % % % % %
LSU3 % % % % % % % %
LMU3 % % % % % % % %

BL1_ % $
STWN % $
STRN % $
STWV % $
STRV % $

WORD #
SYCW #

RL1_ % #
ALCR % #
STOF % #
STPA % #
STPS % #

RL2_ % % !

JJMP % % :

LABL :

FCST $ # :

DWRD !
SYCD !
NSNB !
ZNXB !


JTEN @
SYCL @





--list of op-codes and their description:


NOP_ - no operation / no data. Used inside the optimizer as a temporary placeholder. 
PU1_ - push one register to stack
PU2_ - push two registers to stack (r0 is pushed first)
PUA1 - push one register to stack for argument to a function
PUA2 - push two registers to stack for argument to a function (r0 is pushed first)
POP1 - pop one register to stack
POP2 - pop two registers to stack (r0 is popped to first)
BL1_ - lower byte load to register
RL1_ - load word to register
RL2_ - load double word to two registers, r1 gets upper word
CALL - call to location at registers, r1 is upper word. (see CALL/RET_ description at bottom)
RET_ - return to calling function  (see CALL/RET_ description at bottom)
STPA - transform stack offset into real address using [ %1 + ( Stack_Size - # ) -> r0 ]
			this instruction, when combined with others, may often by optimized into STWN , STRN , STWV , STRV
STPS - identical to STPA, however it is verified that ( ( Stack_Size - # ) <= 0x00FF ) is true, so the backend can use 1 less instruction

STWN - write memory ( word access, non-volatile ) at [ ( %1 + ( 2 * $ ) ) , 0 ] with data in r0
STRN - read  memory ( word access, non-volatile ) at [ ( %1 + ( 2 * $ ) ) , 0 ] into r0
STWV - write memory ( word access, volatile     ) at [ ( %1 + ( 2 * $ ) ) , 0 ] with data in r0
STRV - read  memory ( word access, volatile     ) at [ ( %1 + ( 2 * $ ) ) , 0 ] into r0

ALOC - move stack pointer using [ Stack_Pointer - ( Stack_Size - Initial_Stack_Size ) -> Stack_Pointer ] then [ Stack_Pointer -> %1 ]  (used when function starts, Stack_Size and Initial_Stack_Size value is held in the InstructionBuffer)
ALCR - move stack pointer using [ # -> r0 ] then [ Stack_Pointer - r0 -> Stack_Pointer ] then [ Stack_Pointer -> r0 ]  (used when allocating space for return value for a CALL)
STOF - get stack with offset using [ Stack_Pointer -> %F ] then [ # -> r0 ] then [ r0 + %F -> r0 ]  (used when getting return value for a CALL)
		Note that in initial compiler output (do not rely on it), ALCR and STOF would probably be enclosing the parameters that go to the function call
		however, primarily because not every function returns non-void, not every function call has a ALCR and STOF pair
		also, STOF can be optimized out if the r0 from ALCR can be kept in a register while the arguments are being pushed
		also, ALCR and STOF can be optimized out if there is a way to calculate an address on stack to where the return value could go to avoid it getting stack space allocated by ALCR

AJMP - always absolute jump to address in registers, r1 is upper word
CJMP - conditionally jump to address in first and second registers if third register is zero, r1 is upper word of address

JJMP - always absolute jump to address in registers, r1 is upper word. This jump is for jump tables.
		It also acts as a LABL instruction for it's label number, which points to the 'instruction' after this one.
		Instruction slots after this one (until a JEND) will be JTEN 'instructions' (it is data, and should not be executed, so they are not actually instructions)
JTEN - inserts the location of the label at this location (as a dword) for a jump table. Must be between JJMP and JEND
JEND - see JJMP. This 'instruction' does not translate to an instruction on the backend.

MOV_ - move word in r1 to r0

AND_ - bitwise and  of second and third register into first register
OR__ - bitwise  or  of second and third register into first register
XOR_ - bitwise xor  of second and third register into first register
SSUB - do r0+r1+~r2 -> r1, with carry stored to ones bit of r0 
		In general, carry should not extend past ones bit.
		If the sum would have a carry greater then 1, r0 will still get 1.
		r0 (as the input) is intended to only hold a value of 0 or 1, but could hold other values.
		Note: the '~' is a bitwise invert on r2
ADDN - add      r1 and r2 into r0
SUBN - subtract r1 and r2 into r0
SUBC - subtract r1 and r2 then place carry into ones bit in r0 (all other bits get 0)

MULS - multiply first and second register then place result into first register (upper word is not generated)
MULL - multiply double word of [%D,%E] and double word of [r0,r1] then place result into double word of [%D,%E]
DIVM - do first register divided by second register, as well as first register modulus second register, then place results into first and second register (first gets division, second gets modulus)

SHFT - shift bits in second register down (to lower bits) by 1 bit, then store into first register (second register is not modified, the most significant bit of first register will be 0)
BSWP - take word in second register, swap the byte order, then place result into first register (second register is not modified)

MWWN - memory write word non-volatile - write word into [r1,r2] with word in r0
MRWN - memory read  word non-volatile - read  word   at [r1,r2] and place in r0
MWWV - memory write word volatile     - write word into [r1,r2] with word in r0
MRWV - memory read  word volatile     - read  word   at [r1,r2] and place in r0
MWBN - memory write byte non-volatile - write byte into [%D,r1] with byte in lower byte of r0  (upper byte of r0 must be 0)
MRBN - memory read  byte non-volatile - read  byte   at [%D,r1] and place in lower byte of r0  (upper byte of r0 is set to 0)
MWBV - memory write byte volatile     - write byte into [%D,r1] with byte in lower byte of r0  (upper byte of r0 must be 0)
MRBV - memory read  byte volatile     - read  byte   at [%D,r1] and place in lower byte of r0  (upper byte of r0 is set to 0)

LABL - marks a location. It points to whatever instruction is directly after it. This 'instruction' does not translate to an instruction on the backend.

PHIS - phi start. according to the optimizer, contains one register of  input that is not renamable and not reorderable. backend ignores this 'instruction'
		phi nodes are used to access register values across jumps and labels.
		PHIS may only occur immediately prior to PHIS,LABL,CJMP,AJMP,JJMP
PHIE - phi end.   according to the optimizer, contains one register of output that is not renamable and not reorderable. backend ignores this 'instruction'
		phi nodes are used to access register values across jumps and labels.
		PHIE may only occur immediately after PHIE,LABL

FCST - indicates the start of a function is next. also acts as a LABL instruction.
		The word attached is the Stack_Size
		The byte attached is the Initial_Stack_Size
		This 'instruction' does not translate to an instruction on the backend.
FCEN - indicates the end of a function is here (the instruction above is the last instruction to be considered included in the function most recently indicated)
		FCST and FCEN may NOT be nested
		This 'instruction' does not translate to an instruction on the backend.


-- large instruction op-codes


D32U - performs a 32bit division operation for unsigned inputs.
		[%8,%9]=[%2,%3]/[%4,%5]
		destroys register values, uses label 00000001              [internal label usage:00000024,00000025]
		internally, this pushes a zero to the stack, 
		then it will load the address of label 00000001,
		then CALL to the address

R32U - performs a 32bit remainder operation for unsigned inputs. (`/` is used for clearity of register notation)
		[%6,%7]=[%2,%3]/[%4,%5]
		destroys register values, uses label 00000002              [internal label usage:00000026,00000027]

D32S - performs a 32bit division operation for signed inputs.
		[%8,%9]=[%2,%3]/[%4,%5]
		destroys register values, uses label 00000003

R32S - performs a 32bit remainder operation for signed inputs. (`/` is used for clearity of register notation)
		[%6,%7]=[%2,%3]/[%4,%5]
		destroys register values, uses label 00000004

D64U - performs a 64bit division operation for unsigned inputs.
		[%2,%3,%4,%5]=[%6,%7,%8,%9]/[%A,%B,%C,%D]
		destroys register values, uses label 00000005

R64U - performs a 64bit remainder operation for unsigned inputs. (`/` is used for clearity of register notation)
		[%2,%3,%4,%5]=[%6,%7,%8,%9]/[%A,%B,%C,%D]
		destroys register values, uses label 00000006

D64S - performs a 64bit division operation for signed inputs.
		[%2,%3,%4,%5]=[%6,%7,%8,%9]/[%A,%B,%C,%D]
		destroys register values, uses label 00000007

R64S - performs a 64bit remainder operation for signed inputs. (`/` is used for clearity of register notation)
		[%2,%3,%4,%5]=[%6,%7,%8,%9]/[%A,%B,%C,%D]
		destroys register values, uses label 00000008

LAD0 - adds two 32bit numbers, no inputs are known to be zero
		[r0,r1]=[r2,r3]+[r4,r5]
LAD1 - adds two 32bit numbers, word_3 is known to be zero
		[r0,r1]=[r2,r3]+[r4,~0]
LAD2 - adds two 32bit numbers, word_1 and word_3 are known to be zero
		[r0,r1]=[r2,~0]+[r3,~0]
LAD3 - adds two 64bit numbers
		[r0,r1,r2,r3]=[r0,r1,r2,r3]+[r4,r5,r6,r7]
LAD4 - adds two floats                                destroys register values, uses label 00000009
		[%2,%3]=[%4,%5]+[%6,%7]
LAD5 - adds two doubles                               destroys register values, uses label 0000000A
		[%2,%3,%4,%5]=[%6,%7,%8,%9]+[%A,%B,%C,%D]

LSU0 - subtracts two 32bit numbers
		[r0,r1]=[r0,r1]-[r2,r3]
LSU3 - subtracts two 64bit numbers
		[r0,r1,r2,r3]=[r0,r1,r2,r3]-[r4,r5,r6,r7]
LSU4 - subtracts two floats                           destroys register values, uses label 0000000B
		[%2,%3]=[%4,%5]-[%6,%7]
LSU5 - subtracts two doubles                          destroys register values, uses label 0000000C
		[%2,%3,%4,%5]=[%6,%7,%8,%9]-[%A,%B,%C,%D]

LMU3 - multiplies two 64bit numbers
		[r0,r1,r2,r3]=[r0,r1,r2,r3]*[r4,r5,r6,r7]
LMU4 - multiplies two floats                          destroys register values, uses label 0000000D
		[%2,%3]=[%4,%5]*[%6,%7]
LMU5 - multiplies two doubles                         destroys register values, uses label 0000000E
		[%2,%3,%4,%5]=[%6,%7,%8,%9]*[%A,%B,%C,%D]

LDI4 - divides two floats                             destroys register values, uses label 0000000F
		[%2,%3]=[%4,%5]/[%6,%7]
LDI5 - divides two doubles                            destroys register values, uses label 00000010
		[%2,%3,%4,%5]=[%6,%7,%8,%9]/[%A,%B,%C,%D]

LLS6 - left shift 32bit number                        destroys register values, uses label 00000011 [internal label usage:00000020,00000021]
		[%2,%3]=[%6,%7]<<[%A]
LLS7 - left shift 64bit number                        destroys register values, uses label 00000012
		[%2,%3,%4,%5]=[%6,%7,%8,%9]<<[%A]

LRS6 - right shift 32bit number                       destroys register values, uses label 00000013 [internal label usage:00000022,00000023]
		[%2,%3]=[%6,%7]>>[%A]
LRS7 - right shift 64bit number                       destroys register values, uses label 00000014
		[%2,%3,%4,%5]=[%6,%7,%8,%9]>>[%A]


-- the following op-codes are for symbolic constant data being loaded into registers, and may appear in code segments but not data segments


SYRB - performs 1 BL1_ using the symbolic calculation that follows
SYRW - performs 1 RL1_ using the symbolic calculation that follows
SYRD - performs 2 RL1_ using the symbolic calculation that follows
SYRQ - performs 4 RL1_ using the symbolic calculation that follows
SYRE - ends the symbolic calculation for SYRB,SYRW,SYRD,SYRQ


-- the following op-codes are for symbolic constant data in data segments, and may appear in data segments but not code segments


NSNB - the indicated number of bytes that are next cannot be split up. No allignment is enforced.
ZNXB - places the indicated number of 0 bytes at location. No allignment is enforced.

BYTE - places the given  byte at location. No allignment is enforced.
WORD - places the given  word at location. Word allignment is enforced.
DWRD - places the given dword at location. Word allignment is enforced.

SYDB - places the result of the symbolic calculation that follows as a  byte
SYDW - places the result of the symbolic calculation that follows as a  word
SYDD - places the result of the symbolic calculation that follows as a dword
SYDQ - places the result of the symbolic calculation that follows as a qword
SYDE - ends the symbolic calculation for SYDB,SYDW,SYDD,SYDQ

------ Note that "Word allignment is enforced" means that if that op-code is specified and the data is not currently alligned, an error will be given.

-- the following op-codes are for symbolic calculations, and may appear in data and code segments. they are not runtime instructions.


SYCB - push constant byte as word (to symbolic stack)
SYCW - push constant word         (to symbolic stack)
SYCD - push constant dword        (to symbolic stack)
SYCL - push location of label     (to symbolic stack)

SYW0 -  word addition
SYW1 -  word subtraction
SYW2 -  word multiplication
SYW3 -  word   signed division
SYW4 -  word unsigned division
SYW5 -  word   signed remainder
SYW6 -  word unsigned remainder
SYW7 -  word bitwise xor
SYW8 -  word bitwise and
SYW9 -  word bitwise or
SBLW -  word bitshift  left by word amount
SBRW -  word bitshift right by word amount

SYD0 - dword addition
SYD1 - dword subtraction
SYD2 - dword multiplication
SYD3 - dword   signed division
SYD4 - dword unsigned division
SYD5 - dword   signed remainder
SYD6 - dword unsigned remainder
SYD7 - dword bitwise xor
SYD8 - dword bitwise and
SYD9 - dword bitwise or
SBLD - dword bitshift  left by word amount
SBRD - dword bitshift right by word amount

SYQ0 - qword addition
SYQ1 - qword subtraction
SYQ2 - qword multiplication
SYQ3 - qword   signed division
SYQ4 - qword unsigned division
SYQ5 - qword   signed remainder
SYQ6 - qword unsigned remainder
SYQ7 - qword bitwise xor
SYQ8 - qword bitwise and
SYQ9 - qword bitwise or
SBLQ - qword bitshift  left by word amount
SBRQ - qword bitshift right by word amount

SCBW - sign extend byte (on stack as word) to word
SCWD - sign extend  word to dword
SCZD - zero extend  word to dword
SCDQ - sign extend dword to qword
SCZQ - zero extend dword to qword
SCQD - trim qword to dword (drops upper)
SCDW - trim dword to  word (drops upper)
SCWB - convert  word to bool (if any bits are 1, the word on symbolic stack is 1)
SCDB - convert dword to bool (if any bits are 1, the word on symbolic stack is 1)
SCQB - convert qword to bool (if any bits are 1, the word on symbolic stack is 1)


-- Using CALL/RET_ :

There are some technicalities which make things a little complicated, but easier.

The register %0 is used as a reference point for function calls and returns. 
The register %1 is used as a reference point for the stack frame.
	Generally, %0 and %1 should not be modified by other instructions, however it can be, so be careful.
	ALOC is intended to use these registers, and should always be run at the start of every function.


--Using CALL :

All function calls push arguments last to first, and they use the PUA1 or PUA2 instructions instead of the normal PU1_ and PU2_ instructions

As always, values with more then one word are pushed as the upper word first, for a little endian representation.

First, if and only if the function does not return void, extend stack for return value by ALCR

Then, push arguments.

Then, if applicable, the location of label of function is put into registers (by default, %A and %B).
If the function is being used as a pointer to function, then the location is put into registers from some other operation.

If and only if the function does not return void, an extra argument gets pushed ( by PUA1 ) after all other arguments so far mentioned, and this argument's size is included in Arg_Size
  this possible extra argument contains the address on stack (which if interpreted as a memory address would be the same except that the upper word is zero) that the return value is to be written to

The sizes of all arguments (size is calculated as size on stack) must be calculated from the actual arguments being pushed and then manually pushed by PUA1 after all other arguments so far mentioned.
	The size is in number of bytes, but should always be word alliged. This size is known as Arg_Size, and is not included in Arg_Size.

Then the instruction CALL is done, with it's registers being the location of the function in memory. This transfers control over to the function, which will return to the next instruction when it is completed

When the function returns to the next instruction, all of the arguments to the function have already been popped off the stack, and %0 and %1 holds the same value as it did before CALL



--Internal information for CALL:

When CALL is executed, 
	it pushes %0 to the stack, 
	then pushes %1 to the stack,
	then pushes the double word of the address the instruction counter should return to on function return. 
		The upper word is pushed first.

Then the Stack_Pointer (which is pointing to the lower word of the return address) is put into %0

Then the instrution counter is set to the value in the argument registers.



--Using RET_ :

using RET_ is quite easy. Just don't modify %0 or %1 anywhere in the program.

when the current function desires to return to it's caller, it may use the RET_ instruction. The next instruction is never executed (unless it gets jumped to, of course). The Stack_Pointer may have any value, so it doesn't matter if push/pop pairs are balanced or not.


--Internal information for RET_:

When RET_ is executed, it sets Stack_Pointer to %0.

Then, it pops the next two words into the instruction pointer ( first pop is the lower word ).

Then, it pops the next word into %1.

Then, it pops the next word into %0.

Then, it pops the next word into a temporary storage that will be called TempReg1

Then, it does [ Stack_Pointer + TempReg1 -> Stack_Pointer ]




--Jump Table Example (TODO: should be updated)

The following is an example of a jump table that has been compiled:

00000000 |FCST $0E #0010 :00000005
00000001 |ALOC
00000002 |BL1_ %F $00
00000003 |RL1_ %3 #FFFF
00000004 |BL1_ %C $14
00000005 |STWN %C $00
00000006 |STRN %C $07
00000007 |BL1_ %2 $03
00000008 |SUBN %4 %C %2
00000009 |BL1_ %C $01
0000000A |SSUB %C %2 %4
0000000B |MULS %C %3
0000000C |XOR_ %2 %3 %C
0000000D |BL1_ %3 $03
0000000E |AND_ %5 %3 %C
0000000F |AND_ %3 %2 %4
00000010 |OR__ %E %3 %5
00000011 |BL1_ %3 $00
00000012 |BL1_ %C $04
00000013 |MULL %C %3
00000014 |SYRD %A %B
00000015 |SYCL @0000000C
00000016 |SYRE
00000017 |ADDN %6 %B %F
00000018 |ADDC %5 %E %A
00000019 |ADDN %6 %6 %F
0000001A |JJMP %5 %6 :0000000C
0000001B |JTEN @00000007
0000001C |JTEN @00000008
0000001D |JTEN @00000009
0000001E |JTEN @0000000A
0000001F |JTEN @0000000B
00000020 |JEND
00000021 |LABL :00000007
00000022 |BL1_ %C $0D
00000023 |STWN %C $00
00000024 |SYRD %A %B
00000025 |SYCL @00000006
00000026 |SYRE
00000027 |AJMP %A %B
00000028 |LABL :00000008
00000029 |BL1_ %C $19
0000002A |STWN %C $00
0000002B |LABL :00000009
0000002C |STRN %C $00
0000002D |ADDN %C %C %C
0000002E |STWN %C $00
0000002F |SYRD %A %B
00000030 |SYCL @00000006
00000031 |SYRE
00000032 |AJMP %A %B
00000033 |LABL :0000000A
00000034 |BL1_ %C $04
00000035 |STWN %C $00
00000036 |LABL :0000000B
00000037 |BL1_ %6 $1E
00000038 |STRN %C $00
00000039 |ADDN %4 %C %6
0000003A |STWN %4 $00
0000003B |LABL :00000006
0000003C |STRN %C $00
0000003D |STRN %2 $06
0000003E |BL1_ %3 $00
0000003F |MWWN %C %2 %3
00000040 |RET_
00000041 |FCEN

The source code that generated this is:

int f(int v0){
	int v1=20;
	switch (v0){
		case 3:v1=13;break;
		case 4:v1=25;
		case 5:v1*=2;break;
		case 6:v1=4;
		default:v1+=30;
	}
	return v1;
}











